// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  email         String     @unique
  password      String

  partsHouse    Partshouse[]                 // has many PARTSHOUSES
  recordNotifications Record_Notification[]  // has many NOTIFICATIONS
  partNotifications Part_Notification[]      // has many NOTIFICATIONS
}

model Partshouse {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  name      String

  user      User       @relation(fields: [userId], references: [id])
  userId    Int                             // belongs to one USER
}

model Record {
  id                     Int             @id @default(autoincrement())
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt

  type                   String?
  name                   String   
  brand                  String?
  cost                   Int?
  model                  String?
  serial                 String?
  icon                   String?
  imgUrl                 String?
  purchaseDate           String?
  purchaseUrl            String?
  warrantyInfo           String?
  description            String?

  parts                  Part[]                 // has many PARTS
  recordLog              RecordLog[]            // has many RECORDLOGS
  recordNotifications    Record_Notification[]  // has many NOTIFICATIONS
  partsHouseId           Int                    // belongs to one PARTSHOUSE
}

model Part {
  id                  Int             @id @default(autoincrement())
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  name                String
  cost                Int?
  model               String?
  serial              String?
  imgUrl              String?
  purchaseDate        String?
  purchaseUrl         String?
  warrantyInfo        String?
  description         String?

  partLog             PartLog[]               // has many PARTLOGS
  partNotifications   Part_Notification[]     // has many NOTIFICATIONS
  record              Record          @relation(fields: [recordId], references: [id])
  recordId            Int                     // belongs to one RECORD
}

model RecordLog {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  date      DateTime
  note      String?

  record    Record    @relation(fields: [recordId], references: [id])
  recordId  Int                              // belongs to one RECORD
}

model PartLog {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  date      DateTime
  note      String?

  part      Part      @relation(fields: [partId], references: [id])
  partId    Int                               // belongs to one PART
}

model Record_Notification {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  date      DateTime
  note      String

  users     User[]                 // belongs to many USERS
  records   Record[]               // belongs to many RECORDS
}

model Part_Notification {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  date      DateTime
  note      String

  users     User[]                 // belongs to many USERS
  parts     Part[]                 // belongs to many PARTS
}